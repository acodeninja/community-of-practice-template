{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is a Community of Practice?","text":"<p>Work in Progress!</p> <p>This documentation is a work in progress.  To check what types of components exist, check out the Kitchen Sink. To remove this message, edit <code>docs/index.md</code> and delete <code>docs/kitchen-sink.md</code>.</p> <p>A community of practice (CoP) is a group of people who share a concern or a passion for something they do and learn how to do it better as they interact regularly. CoPs are for people who share common job roles, responsibilities or remits. </p> <p>A CoP can evolve naturally because of the members' common interest in a particular domain or area, or it can be created  deliberately with the goal of gaining knowledge related to a specific field. It is through the process of sharing  information and experiences with the group that members learn from each other, and have an opportunity to develop  personally and professionally.</p> <p>You can find out more about how to set up a CoP around a specific discipline on the  Community Development Framework guidance pages from  GOV.UK.</p> <p>Creating a new community</p> <p>To create a new landing page, decide on your community name and create a new file at <code>docs/&lt;community&gt;/index.md</code>.</p>"},{"location":"#community-landing-pages","title":"Community Landing Pages","text":"<p>Architecture Delivery Design Development Security</p>"},{"location":"kitchen-sink/","title":"Kitchen Sink","text":""},{"location":"kitchen-sink/#abbreviations","title":"Abbreviations","text":"<p>This template comes with a lot of built-in abbreviations. To use them just type an abbreviation, and it will be annotated.</p> <ul> <li>WCAG</li> <li>NaN</li> <li>W3C</li> </ul> <p>If an abbreviation is missing, just add it to the <code>snippets/abbreviations.md</code> file.</p> <p>Only in production!</p> <p>The abbreviations will only render when you run <code>make build</code>, they do not show with <code>make dev</code>.</p>"},{"location":"kitchen-sink/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>You can include keyboard shortcuts in your documentation using the following formatting.</p> <p>To copy, press Ctrl+C or Cmd+C</p> <pre><code>To copy, press ++ctrl+c++ or ++cmd+c++\n</code></pre>"},{"location":"kitchen-sink/#definition-lists","title":"Definition lists","text":"<p>Definition lists or <code>dl</code> tags, are useful anywhere you need a list of key-value pairs.</p> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p>"},{"location":"kitchen-sink/#tables","title":"Tables","text":"<p>Normal Markdown tables, nothing new here.</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"kitchen-sink/#math-and-latex","title":"Math and Latex","text":"<p>You can use the MathJax library to display both inline and centred equations, or formatted text.</p>"},{"location":"kitchen-sink/#inline","title":"Inline","text":"<pre><code>Albert Einstein\u2019s famous energy-mass equation, $E = mc^ 2$ is one of the greatest marvels of this universe.\n</code></pre> <p>Albert Einstein\u2019s famous energy-mass equation, \\(E = mc^ 2\\) is one of the greatest marvels of this universe.</p>"},{"location":"kitchen-sink/#centred","title":"Centred","text":"<pre><code>Albert Einstein\u2019s famous energy-mass equation, is one of the greatest marvels of this universe.\n\n$$\nE = mc^ 2\n$$\n</code></pre> <p>Albert Einstein\u2019s famous energy-mass equation, is one of the greatest marvels of this universe.</p> \\[E = mc^ 2\\]"},{"location":"kitchen-sink/#icons-and-emojis","title":"Icons and Emojis","text":"<p>To include icons and emoji, use the same syntax you would on slack. </p> <p>For example, <code>:material-account-child-outline:</code> produces .</p>"},{"location":"kitchen-sink/#available-libraries","title":"Available Libraries","text":"<ul> <li>Material Design Icons (prefix with <code>:material-</code>)</li> <li>Font Awesome Icons (prefix with <code>:fontawesome-</code>)</li> <li>Octicons (prefix with <code>:octicons-</code>)</li> </ul>"},{"location":"kitchen-sink/#diagrams","title":"Diagrams","text":"<p>Diagramming uses the mermaid library. This template uses version 9.4.3.</p>"},{"location":"kitchen-sink/#flowchart","title":"Flowchart","text":"<p>Documentation</p> <pre><code>flowchart LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]</code></pre>"},{"location":"kitchen-sink/#sequence-diagram","title":"Sequence Diagram","text":"<p>Documentation</p> <pre><code>sequenceDiagram\n    par Alice to Bob\n        Alice-&gt;&gt;Bob: Hello guys!\n    and Alice to John\n        Alice-&gt;&gt;John: Hello guys!\n    end\n    Bob--&gt;&gt;Alice: Hi Alice!\n    John--&gt;&gt;Alice: Hi Alice!</code></pre>"},{"location":"kitchen-sink/#class-diagram","title":"Class Diagram","text":"<p>Documentation</p> <pre><code>classDiagram\n    note \"From Duck till Zebra\"\n    Animal &lt;|-- Duck\n    note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\"\n    Animal &lt;|-- Fish\n    Animal &lt;|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }</code></pre>"},{"location":"kitchen-sink/#state-diagram","title":"State Diagram","text":"<p>Documentation</p> <pre><code>stateDiagram\n    direction LR\n    [*] --&gt; A\n    A --&gt; B\n    B --&gt; C\n    state B {\n      direction LR\n      a --&gt; b\n    }\n    B --&gt; D</code></pre>"},{"location":"kitchen-sink/#entity-relationship","title":"Entity Relationship","text":"<p>Documentation</p> <pre><code>erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }</code></pre>"},{"location":"kitchen-sink/#user-journey","title":"User Journey","text":"<p>Documentation</p> <pre><code>journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me</code></pre>"},{"location":"kitchen-sink/#gantt","title":"Gantt","text":"<p>Documentation</p> <pre><code>gantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :1d\n    Functionality added                 :milestone, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h</code></pre>"},{"location":"kitchen-sink/#pie-chart","title":"Pie Chart","text":"<p>Documentation</p> <pre><code>pie showData\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5</code></pre>"},{"location":"kitchen-sink/#requirement","title":"Requirement","text":"<p>Documentation</p> <pre><code>requirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    functionalRequirement test_req2 {\n    id: 1.1\n    text: the second test text.\n    risk: low\n    verifymethod: inspection\n    }\n\n    performanceRequirement test_req3 {\n    id: 1.2\n    text: the third test text.\n    risk: medium\n    verifymethod: demonstration\n    }\n\n    interfaceRequirement test_req4 {\n    id: 1.2.1\n    text: the fourth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    physicalRequirement test_req5 {\n    id: 1.2.2\n    text: the fifth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    designConstraint test_req6 {\n    id: 1.2.3\n    text: the sixth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    element test_entity2 {\n    type: word doc\n    docRef: reqs/test_entity\n    }\n\n    element test_entity3 {\n    type: \"test suite\"\n    docRef: github.com/all_the_tests\n    }\n\n\n    test_entity - satisfies -&gt; test_req2\n    test_req - traces -&gt; test_req2\n    test_req - contains -&gt; test_req3\n    test_req3 - contains -&gt; test_req4\n    test_req4 - derives -&gt; test_req5\n    test_req5 - refines -&gt; test_req6\n    test_entity3 - verifies -&gt; test_req5\n    test_req &lt;- copies - test_entity2</code></pre>"},{"location":"kitchen-sink/#git-graph","title":"Git Graph","text":"<p>Documentation</p> <pre><code>gitGraph:\n    commit \"Ashish\"\n    branch newbranch\n    checkout newbranch\n    commit id:\"1111\"\n    commit tag:\"test\"\n    checkout main\n    commit type: HIGHLIGHT\n    commit\n    merge newbranch\n    commit\n    branch b2\n    commit</code></pre>"},{"location":"kitchen-sink/#c4-diagram","title":"C4 Diagram","text":"<p>Documentation</p> <pre><code>C4Container\n    title Container diagram for Internet Banking System\n\n    System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\")\n    Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\")\n\n    Container_Boundary(c1, \"Internet Banking\") {\n        Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to cutomers via their web browser\")\n        Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n        Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n        ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n        ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n\n    }\n\n    System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Rel(customer, web_app, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\")\n    Rel(customer, spa, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(customer, spa, $offsetY=\"-40\")\n    Rel(customer, mobile_app, \"Uses\")\n    UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\")\n\n    Rel(web_app, spa, \"Delivers\")\n    UpdateRelStyle(web_app, spa, $offsetX=\"130\")\n    Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\n    Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\n    Rel(email_system, customer, \"Sends e-mails to\")\n    UpdateRelStyle(email_system, customer, $offsetX=\"-45\")\n    Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\")\n    UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\")\n    Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n    UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")</code></pre>"},{"location":"architecture/diagramming/","title":"Why diagram?","text":"<p>As an industry, we do have the Unified Modeling Language (UML), ArchiMate and SysML, but asking whether these provide an  effective way to communicate software architecture is often irrelevant because many teams have already thrown them out  in favour of much simpler \"boxes and lines\" diagrams. Abandoning these modelling languages is one thing but, perhaps in  the race for agility, many software development teams have lost the ability to communicate visually.</p>"},{"location":"architecture/diagramming/#different-diagrams-for-different-audiences","title":"Different Diagrams for Different Audiences","text":""},{"location":"architecture/diagramming/#system-context-diagram","title":"System Context Diagram","text":"<pre><code>C4Context\n    Person(customer, \"Customer\", \"A customer of &lt;br /&gt;Widgets Limited.\")\n\n    Enterprise_Boundary(c0, \"Widgets Limited\") {\n        Person(csa, \"Customer Service Agent\", \"Deals with customer enquiries.\")\n        System(ecommerce, \"E-commerce System\", \"Allows customers to buy widgets&lt;br /&gt;online via the widgets.com website.\")\n        System(fulfillment, \"Fulfillment System\", \"Responsible for processing and &lt;br /&gt;shipping of customer orders.\")\n    }\n\n    System_Ext(taxamo, \"Taxamo\", \"Calculates local tax &lt;br /&gt;(for EU B2B customers) and acts as &lt;br /&gt;a front-end for Braintree Payments.\")\n\n    System_Ext(braintree, \"Braintree Payments\", \"Processes credit card payments on &lt;br /&gt;behalf of Widgets Limited.\")\n\n    System_Ext(post, \"Jersey Post\", \"Calculates worldwide &lt;br /&gt;shipping costs for packages.\")\n\n    Rel_R(customer, csa, \"Asks questions to\", \"Telephone\")\n\n    Rel_R(customer, ecommerce, \"Places orders for widgets using\")\n\n    Rel(csa, ecommerce, \"Looks up order information using\")\n\n    Rel_R(ecommerce, fulfillment, \"Sends order information to\")\n\n    Rel_D(fulfillment, post, \"Gets shipping charges from\")\n\n    Rel_D(ecommerce, taxamo, \"Delegates credit card processing to\")\n\n    Rel_L(taxamo, braintree, \"Uses for credit card processing\")</code></pre> <p>System Context Diagram Details</p> <p>Scope: A single software system.</p> <p>Primary elements: The software system in scope.</p> <p>Supporting elements: People (e.g. users, actors, roles, or personas) and software systems (external  dependencies) that are directly connected to the software system in scope. Typically these other software systems  sit outside the scope or boundary of your own software system, and you don't have responsibility or ownership of  them.</p> <p>Intended audience: Everybody, both technical and non-technical people, inside and outside of the software  development team.</p> <p>Recommended for most teams: Yes.</p>"}]}