{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-a-community-of-practice","title":"What is a Community of Practice?","text":"<p>A community of practice (CoP) is a group of people who share a concern or a passion for something they do and learn how to do it better as they interact regularly. CoPs are for people who share common job roles, responsibilities or remits. </p> <p>A CoP can evolve naturally because of the members' common interest in a particular domain or area, or it can be created  deliberately with the goal of gaining knowledge related to a specific field. It is through the process of sharing  information and experiences with the group that members learn from each other, and have an opportunity to develop  personally and professionally.</p> <p>You can find out more about how to set up a CoP around a specific discipline on the  Community Development Framework guidance pages from  GOV.UK.</p>"},{"location":"#community-landing-pages","title":"Community Landing Pages","text":"<p>Architecture Engineering</p> <p>Creating a new community</p> <p>To create a new landing page, decide on your community name and create a new file at <code>docs/&lt;community&gt;/index.md</code>.</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"kitchen-sink/","title":"Kitchen Sink","text":""},{"location":"kitchen-sink/#abbreviations","title":"Abbreviations","text":"<p>This template comes with a lot of built-in abbreviations. To use them just type an abbreviation, and it will be annotated.</p> <ul> <li>WCAG</li> <li>NaN</li> <li>W3C</li> </ul> <p>If an abbreviation is missing, just add it to the <code>snippets/abbreviations.md</code> file.</p> <p>Only in production!</p> <p>The abbreviations will only render when you run <code>make build</code>, they do not show with <code>make dev</code>.</p>"},{"location":"kitchen-sink/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>You can include keyboard shortcuts in your documentation using the following formatting.</p> <p>To copy, press Ctrl+C or Cmd+C</p> <pre><code>To copy, press ++ctrl+c++ or ++cmd+c++\n</code></pre>"},{"location":"kitchen-sink/#definition-lists","title":"Definition lists","text":"<p>Definition lists or <code>dl</code> tags, are useful anywhere you need a list of key-value pairs.</p> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p>"},{"location":"kitchen-sink/#tables","title":"Tables","text":"<p>Normal Markdown tables, nothing new here.</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"kitchen-sink/#math-and-latex","title":"Math and Latex","text":"<p>You can use the MathJax library to display both inline and centred equations, or formatted text.</p>"},{"location":"kitchen-sink/#inline","title":"Inline","text":"<pre><code>Albert Einstein\u2019s famous energy-mass equation, $E = mc^ 2$ is one of the greatest marvels of this universe.\n</code></pre> <p>Albert Einstein\u2019s famous energy-mass equation, \\(E = mc^ 2\\) is one of the greatest marvels of this universe.</p>"},{"location":"kitchen-sink/#centred","title":"Centred","text":"<pre><code>Albert Einstein\u2019s famous energy-mass equation, is one of the greatest marvels of this universe.\n\n$$\nE = mc^ 2\n$$\n</code></pre> <p>Albert Einstein\u2019s famous energy-mass equation, is one of the greatest marvels of this universe.</p> \\[E = mc^ 2\\]"},{"location":"kitchen-sink/#icons-and-emojis","title":"Icons and Emojis","text":"<p>To include icons and emoji, use the same syntax you would on slack. </p> <p>For example, <code>:material-account-child-outline:</code> produces .</p>"},{"location":"kitchen-sink/#available-libraries","title":"Available Libraries","text":"<ul> <li>Material Design Icons (prefix with <code>:material-</code>)</li> <li>Font Awesome Icons (prefix with <code>:fontawesome-</code>)</li> <li>Octicons (prefix with <code>:octicons-</code>)</li> </ul>"},{"location":"kitchen-sink/#plantuml-diagrams","title":"PlantUML Diagrams","text":"<p>PlantUML diagrams use the PlantUML web service to render diagrams. They support click to zoom, allowing more complex  diagrams. Take a look at Architecture-&gt;Diagramming for a more thorough explainer on how to use PlantUML diagrams for technical documentation.</p> <pre><code>@startuml\n!include &lt;C4/C4_Container&gt;\n\nPerson(personAlias, \"Label\", \"Optional Description\")\nContainer(containerAlias, \"Label\", \"Technology\", \"Optional Description\")\nSystem(systemAlias, \"Label\", \"Optional Description\")\n\nSystem_Ext(extSystemAlias, \"Label\", \"Optional Description\")\n\nRel(personAlias, containerAlias, \"Label\", \"Optional Technology\")\n\nRel_U(systemAlias, extSystemAlias, \"Label\", \"Optional Technology\")\n@enduml</code></pre>"},{"location":"kitchen-sink/#basic-diagrams","title":"Basic Diagrams","text":"<p>Basic diagramming uses the mermaid library. This template uses version 9.4.3 and does  not support click to zoom.</p>"},{"location":"kitchen-sink/#flowchart","title":"Flowchart","text":"<p>Documentation</p> <pre><code>flowchart LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]</code></pre>"},{"location":"kitchen-sink/#sequence-diagram","title":"Sequence Diagram","text":"<p>Documentation</p> <pre><code>sequenceDiagram\n    par Alice to Bob\n        Alice-&gt;&gt;Bob: Hello guys!\n    and Alice to John\n        Alice-&gt;&gt;John: Hello guys!\n    end\n    Bob--&gt;&gt;Alice: Hi Alice!\n    John--&gt;&gt;Alice: Hi Alice!</code></pre>"},{"location":"kitchen-sink/#class-diagram","title":"Class Diagram","text":"<p>Documentation</p> <pre><code>classDiagram\n    note \"From Duck till Zebra\"\n    Animal &lt;|-- Duck\n    note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\"\n    Animal &lt;|-- Fish\n    Animal &lt;|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }</code></pre>"},{"location":"kitchen-sink/#state-diagram","title":"State Diagram","text":"<p>Documentation</p> <pre><code>stateDiagram\n    direction LR\n    [*] --&gt; A\n    A --&gt; B\n    B --&gt; C\n    state B {\n      direction LR\n      a --&gt; b\n    }\n    B --&gt; D</code></pre>"},{"location":"kitchen-sink/#entity-relationship","title":"Entity Relationship","text":"<p>Documentation</p> <pre><code>erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }</code></pre>"},{"location":"kitchen-sink/#user-journey","title":"User Journey","text":"<p>Documentation</p> <pre><code>journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me</code></pre>"},{"location":"kitchen-sink/#gantt","title":"Gantt","text":"<p>Documentation</p> <pre><code>gantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :1d\n    Functionality added                 :milestone, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h</code></pre>"},{"location":"kitchen-sink/#pie-chart","title":"Pie Chart","text":"<p>Documentation</p> <pre><code>pie showData\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5</code></pre>"},{"location":"kitchen-sink/#requirement","title":"Requirement","text":"<p>Documentation</p> <pre><code>requirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    functionalRequirement test_req2 {\n    id: 1.1\n    text: the second test text.\n    risk: low\n    verifymethod: inspection\n    }\n\n    performanceRequirement test_req3 {\n    id: 1.2\n    text: the third test text.\n    risk: medium\n    verifymethod: demonstration\n    }\n\n    interfaceRequirement test_req4 {\n    id: 1.2.1\n    text: the fourth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    physicalRequirement test_req5 {\n    id: 1.2.2\n    text: the fifth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    designConstraint test_req6 {\n    id: 1.2.3\n    text: the sixth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    element test_entity2 {\n    type: word doc\n    docRef: reqs/test_entity\n    }\n\n    element test_entity3 {\n    type: \"test suite\"\n    docRef: github.com/all_the_tests\n    }\n\n\n    test_entity - satisfies -&gt; test_req2\n    test_req - traces -&gt; test_req2\n    test_req - contains -&gt; test_req3\n    test_req3 - contains -&gt; test_req4\n    test_req4 - derives -&gt; test_req5\n    test_req5 - refines -&gt; test_req6\n    test_entity3 - verifies -&gt; test_req5\n    test_req &lt;- copies - test_entity2</code></pre>"},{"location":"kitchen-sink/#git-graph","title":"Git Graph","text":"<p>Documentation</p> <pre><code>gitGraph:\n    commit \"Ashish\"\n    branch newbranch\n    checkout newbranch\n    commit id:\"1111\"\n    commit tag:\"test\"\n    checkout main\n    commit type: HIGHLIGHT\n    commit\n    merge newbranch\n    commit\n    branch b2\n    commit</code></pre> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"architecture/diagramming/","title":"Why diagram?","text":"<p>During developing a software solution engineers must communicate the place of a system within a wider portfolio, the context of the system, and the components that make up that system. While written communication is widely used, it can  lead to differing mental models of a software system.</p> <p>This is where effective diagramming comes in, presenting abstracted contextual views of the software system. These views  will enable technical and non-technical participants to have a shared vision of the system and aid in discussing issues that present themselves during development.</p> <p>To ensure diagrams clearly communicate the intended contextual information it's a good idea to assess diagrams for  clarity. The C4 Diagram Bingo card can make assessing diagrams more engaging.</p> <p>For more information on C4 diagramming see the C4 website.</p>"},{"location":"architecture/diagramming/#core-diagrams","title":"Core Diagrams","text":"<p>The core diagrams describe the system in abstract terms and focus on the context, containers and components of the system. C4 modelling includes more diagram types, but some place an additional maintenance burden on developers that is not outweighed by the information conveyed.</p>"},{"location":"architecture/diagramming/#context-diagram","title":"Context Diagram","text":"<p>The context diagram shows the high level parts of the system, users that interact with them, and the external or  third-party systems integrated with the system.</p> <p>Detail isn't important here as this is your zoomed out view showing a big picture of the system landscape. The focus  should be on people (actors, roles, personas, etc) and software systems rather than technologies, protocols and other  low-level details. It's the sort of diagram that you could show to non-technical people.</p> <pre><code>@startuml\n'ref http://plantuml.com/stdlib\n!include &lt;C4/C4_Context&gt;\n!include &lt;office/Users/user.puml&gt;\n\ntitle System Context diagram for Internet Banking System\n\nPerson(customer, \"Personal Banking Customer\", \"A customer of the bank, with personal bank accounts.\")\nSystem(banking_system, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\nSystem_Ext(mail_system, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\nSystem_Ext(mainframe, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\nRel(customer, banking_system, \"Uses\")\nRel_Back(customer, mail_system, \"Sends e-mails to\")\nRel_Neighbor(banking_system, mail_system, \"Sends e-mails\", \"SMTP\")\nRel(banking_system, mainframe, \"Uses\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: C4 Model Sample Context Diagram</p> <p>System Context Diagram Details</p> <p>Scope: A single software system.</p> <p>Primary elements: The software system in scope.</p> <p>Supporting elements: People (e.g. users, actors, roles, or personas) and software systems (external  dependencies) that are directly connected to the software system in scope. Typically these other software systems  sit outside the scope or boundary of your own software system, and you don't have responsibility or ownership of  them.</p> <p>Intended audience: Everybody, both technical and non-technical people, inside and outside of the software  development team.</p> <p>Recommended for most teams: Yes.</p>"},{"location":"architecture/diagramming/#container-diagram","title":"Container Diagram","text":"<p>Zooming in by one level, the container diagram (nothing to do with docker containers) splits out each application within the system by its constituent containers. Containers can be APIs, frontend applications, and databases, amongst other  things.</p> <p>The Container diagram shows the high-level shape of the software architecture and how responsibilities are distributed  across it. It also shows the major technology choices and how the containers communicate with one another. It's a  simple, high-level technology focussed diagram that is useful for software developers and support/operations staff  alike.</p> <pre><code>@startuml\n!include &lt;C4/C4_Container&gt;\n\ntitle Container diagram for Internet Banking System\n\nPerson(customer, Customer, \"A customer of the bank, with personal bank accounts\")\n\nSystem_Boundary(c1, \"Internet Banking\") {\n    Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\")\n    Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\")\n    Container(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\")\n    ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\")\n    Container(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\")\n}\n\nSystem_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\")\nSystem_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\nRel(customer, web_app, \"Uses\", \"HTTPS\")\nRel(customer, spa, \"Uses\", \"HTTPS\")\nRel(customer, mobile_app, \"Uses\")\n\nRel_Neighbor(web_app, spa, \"Delivers\")\nRel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\")\nRel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\")\nRel_Back_Neighbor(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\")\n\nRel_Back(customer, email_system, \"Sends e-mails to\")\nRel_Back(email_system, backend_api, \"Sends e-mails using\", \"sync, SMTP\")\nRel_Neighbor(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: C4 Model Sample Container Diagram</p> <p>Container Diagram Details</p> <p>Scope: A single software system.</p> <p>Primary elements: Containers within the software system in scope.</p> <p>Supporting elements: People and software systems directly connected to the containers.</p> <p>Intended audience: Technical people inside and outside of the software development team; including software  architects, developers and operations/support staff.</p> <p>Recommended for most teams: Yes.</p> <p>Notes: Notes: This diagram says nothing about clustering, load balancers, replication, failover, etc because it  will likely vary across different environments (e.g. production, staging, development, etc). This information is  better captured via one or more deployment diagrams.</p>"},{"location":"architecture/diagramming/#component-diagram","title":"Component Diagram","text":"<p>The Component diagram shows how a container is made up of a number of \"components\", what each of those components are,  their responsibilities and the technology/implementation details.</p> <pre><code>@startuml\n!include &lt;C4/C4_Component&gt;\n\ntitle Component diagram for Internet Banking System - API Application\n\nContainer(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\")\nContainer(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset ot the internet banking functionality to customers via their mobile mobile device.\")\nContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\nSystem_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\nContainer_Boundary(api, \"API Application\") {\n    Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\")\n    Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\")\n    Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\")\n    Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\")\n\n    Rel(sign, security, \"Uses\")\n    Rel(accounts, mbsfacade, \"Uses\")\n    Rel(security, db, \"Read &amp; write to\", \"JDBC\")\n    Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\")\n}\n\nRel(spa, sign, \"Uses\", \"JSON/HTTPS\")\nRel(spa, accounts, \"Uses\", \"JSON/HTTPS\")\n\nRel(ma, sign, \"Uses\", \"JSON/HTTPS\")\nRel(ma, accounts, \"Uses\", \"JSON/HTTPS\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: C4 Model Sample Component Diagram</p> <p>Component Diagram Details</p> <p>Scope: A single container.</p> <p>Primary elements: Components within the container in scope.</p> <p>Supporting elements: Containers (within the software system in scope) plus people and software systems directly  connected to the components.</p> <p>Intended audience: Software architects and developers.</p> <p>Recommended for most teams: No, only create component diagrams if you feel they add value, and consider  automating their creation for long-lived documentation.</p>"},{"location":"architecture/diagramming/#additional-diagrams","title":"Additional Diagrams","text":""},{"location":"architecture/diagramming/#system-landscape-diagram","title":"System Landscape Diagram","text":"<p>The system landscape can be useful in contextualising an entire ecosystem. From a practical perspective, a system  landscape diagram is really just a system context diagram without a specific focus on a particular software system.</p> <pre><code>@startuml\n'ref http://plantuml.com/stdlib\n!include &lt;C4/C4_Context&gt;\n\ntitle System Landscape diagram for Big Bank plc\n\nPerson(customer, \"Personal Banking Customer\", \"A customer of the bank, with personal bank accounts.\")\n\nEnterprise_Boundary(c0, \"Big Bank plc\") {\n    System(banking_system, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n\n    System_Ext(atm, \"ATM\", \"Allows customers to withdraw cash.\")\n    System_Ext(mail_system, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n\n    System_Ext(mainframe, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\n    Person_Ext(customer_service, \"Customer Service Staff\", \"Customer service staff within the bank.\")\n    Person_Ext(back_office, \"Back Office Staff\", \"Administration and support staff within the bank.\")\n}\n\nRel_Neighbor(customer, banking_system, \"Uses\")\nRel_R(customer, atm, \"Withdraws cash using\")\nRel_Back(customer, mail_system, \"Sends e-mails to\")\n\nRel_R(customer, customer_service, \"Asks questions to\", \"Telephone\")\n\nRel_D(banking_system, mail_system, \"Sends e-mail using\")\nRel_R(atm, mainframe, \"Uses\")\nRel_R(banking_system, mainframe, \"Uses\")\nRel_D(customer_service, mainframe, \"Uses\")\nRel_U(back_office, mainframe, \"Uses\")\n\nLay_D(atm, banking_system)\n\nLay_D(atm, customer)\nLay_U(mail_system, customer)\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: C4 Model Sample System Landscape Diagram</p> <p>System Landscape Diagram Details</p> <p>Scope: An enterprise/organisation/department/etc.</p> <p>Primary elements: People and software systems related to the chosen scope.</p> <p>Intended audience: Technical and non-technical people, inside and outside of the software development team.</p> <p>Recommended for most teams: Yes.</p>"},{"location":"architecture/diagramming/#deployment-diagram","title":"Deployment Diagram","text":"<p>A deployment diagram allows you to illustrate how instances of software systems and/or containers in the static model  are deployed on to the infrastructure within a given deployment environment.</p> <p>These diagrams are useful when discussing concerns around infrastructure and security with external teams.</p> <pre><code>@startuml\n!include &lt;C4/C4_Deployment&gt;\n\nAddElementTag(\"fallback\", $bgColor=\"#c0c0c0\")\nAddRelTag(\"fallback\", $textColor=\"#c0c0c0\", $lineColor=\"#438DD5\")\n\nWithoutPropertyHeader()\n\n' calculated legend is used (activated in last line)\n' LAYOUT_WITH_LEGEND()\n\ntitle Deployment Diagram for Internet Banking System - Live\n\nDeployment_Node(plc, \"Live\", \"Big Bank plc\", \"Big Bank plc data center\"){\n    AddProperty(\"Location\", \"London and Reading\")\n    Deployment_Node_L(dn, \"bigbank-api***\\tx8\", \"Ubuntu 16.04 LTS\", \"A web server residing in the web server farm, accessed via F5 BIG-IP LTMs.\"){\n        AddProperty(\"Java Version\", \"8\")\n        AddProperty(\"Xmx\", \"512M\")\n        AddProperty(\"Xms\", \"1024M\")\n        Deployment_Node_L(apache, \"Apache Tomcat\", \"Apache Tomcat 8.x\", \"An open source Java EE web server.\"){\n            Container(api, \"API Application\", \"Java and Spring MVC\", \"Provides Internet Banking functionality via a JSON/HTTPS API.\")\n        }\n    }\n    AddProperty(\"Location\", \"London\")\n    Deployment_Node_L(bigbankdb01, \"bigbank-db01\", \"Ubuntu 16.04 LTS\", \"The primary database server.\"){\n        Deployment_Node_L(oracle, \"Oracle - Primary\", \"Oracle 12c\", \"The primary, live database server.\"){\n            ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\n        }\n    }\n    AddProperty(\"Location\", \"Reading\")\n    Deployment_Node_R(bigbankdb02, \"bigbank-db02\", \"Ubuntu 16.04 LTS\", \"The secondary database server.\", $tags=\"fallback\") {\n        Deployment_Node_R(oracle2, \"Oracle - Secondary\", \"Oracle 12c\", \"A secondary, standby database server, used for failover purposes only.\", $tags=\"fallback\") {\n            ContainerDb(db2, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\", $tags=\"fallback\")\n        }\n    }\n    AddProperty(\"Location\", \"London and Reading\")\n    Deployment_Node_R(bb2, \"bigbank-web***\\tx4\", \"Ubuntu 16.04 LTS\", \"A web server residing in the web server farm, accessed via F5 BIG-IP LTMs.\"){\n        AddProperty(\"Java Version\", \"8\")\n        AddProperty(\"Xmx\", \"512M\")\n        AddProperty(\"Xms\", \"1024M\")\n        Deployment_Node_R(apache2, \"Apache Tomcat\", \"Apache Tomcat 8.x\", \"An open source Java EE web server.\"){\n            Container(web, \"Web Application\", \"Java and Spring MVC\", \"Delivers the static content and the Internet Banking single page application.\")\n        }\n    }\n}\n\nDeployment_Node(mob, \"Customer's mobile device\", \"Apple IOS or Android\"){\n    Container(mobile, \"Mobile App\", \"Xamarin\", \"Provides a limited subset of the Internet Banking functionality to customers via their mobile device.\")\n}\n\nDeployment_Node(comp, \"Customer's computer\", \"Microsoft Windows of Apple macOS\"){\n    Deployment_Node(browser, \"Web Browser\", \"Google Chrome, Mozilla Firefox, Apple Safari or Microsoft Edge\"){\n        Container(spa, \"Single Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet Banking functionality to customers via their web browser.\")\n    }\n}\n\nRel(mobile, api, \"Makes API calls to\", \"json/HTTPS\")\nRel(spa, api, \"Makes API calls to\", \"json/HTTPS\")\nRel_U(web, spa, \"Delivers to the customer's web browser\")\nRel(api, db, \"Reads from and writes to\", \"JDBC\")\nRel(api, db2, \"Reads from and writes to\", \"JDBC\", $tags=\"fallback\")\nRel_R(db, db2, \"Replicates data to\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: C4 Model Sample Deployment Diagram</p> <p>Deployment Diagram Details</p> <p>Scope: One or more software systems within a single deployment environment (e.g. production, staging,  development, etc).</p> <p>Primary elements: Deployment nodes, software system instances, and container instances.</p> <p>Intended audience: Infrastructure nodes used in the deployment of the software system.</p> <p>Recommended for most teams: Technical people inside and outside of the software development team; including  software architects, developers, infrastructure architects, and operations/support staff.</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"architecture/Decision-Records/","title":"Decision Records","text":""},{"location":"architecture/Decision-Records/#why-record-decisions","title":"Why record decisions?","text":"<p>Most projects will make decisions that are agreed upon by team members and drastically impact the path taken to fulfil the project's requirements. Recording these decisions is an important part of project governance and eases onboarding for new developers.</p>"},{"location":"architecture/Decision-Records/#how-to-record-decisions","title":"How to record decisions","text":"<p>Decisions can be recorded in short-form or long-form, to provide the best results, long-form decision records should be used where possible. A good choice for the first decision record of a project is recording that you will in fact, record decisions.</p>"},{"location":"architecture/Decision-Records/#short-decision-record-example","title":"Short Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because it is a standard framework and the features of the other frameworks do not\noutweigh the drawback of adding a new dependency.\n</code></pre>"},{"location":"architecture/Decision-Records/#long-decision-record-example","title":"Long Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because comes out best (see below).\n\n### Consequences\n\n* Good, because tests are more readable\n* Good, because more easy to write tests\n* Good, because more readable assertions\n* Bad, because more complicated testing leads to more complicated assertions\n\n## Pros and Cons of the Options\n\n### Plain JUnit5\n\nHomepage: &lt;https://junit.org/junit5/docs/current/user-guide/&gt;\nJabRef testing guidelines: &lt;https://devdocs.jabref.org/getting-into-the-code/code-howtos#test-cases&gt;\n\nExample:\n\n```java\nString actual = markdownFormatter.format(source);\nassertTrue(actual.contains(\"Markup&lt;br /&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item one&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item 2&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&gt; rest\"));\nassertFalse(actual.contains(\"\\n\"));\n```\n\n* Good, because Junit5 is \"common Java knowledge\"\n* Bad, because complex assertions tend to get hard to read\n* Bad, because no fluent API\n\n### Hamcrest\n\nHomepage: &lt;https://github.com/hamcrest/JavaHamcrest&gt;\n\n* Good, because offers advanced matchers (such as `contains`)\n* Bad, because not full fluent API\n* Bad, because entry barrier is increased\n\n### AssertJ\n\nHomepage: &lt;https://joel-costigliola.github.io/assertj/&gt;\n\nExample:\n\n```java\nassertThat(markdownFormatter.format(source))\n        .contains(\"Markup&lt;br /&gt;\")\n        .contains(\"&lt;li&gt;list item one&lt;/li&gt;\")\n        .contains(\"&lt;li&gt;list item 2&lt;/li&gt;\")\n        .contains(\"&gt; rest\")\n        .doesNotContain(\"\\n\");\n```\n\n* Good, because offers fluent assertions\n* Good, because allows partial string testing to focus on important parts\n* Good, because assertions are more readable\n* Bad, because not commonly used\n* Bad, because newcomers have to learn an additional language to express test cases\n* Bad, because entry barrier is increased\n* Bad, because expressions of test cases vary from unit test to unit test\n\n## More Information\n\nGerman comparison between Hamcrest and AssertJ: &lt;https://www.sigs-datacom.de/uploads/tx_dmjournals/philipp_JS_06_15_gRfN.pdf&gt;.\n</code></pre> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"architecture/Decision-Records/A0001-record-decisions-using-madr/","title":"A0001: Record decisions using MADR","text":"<p>Proposed  | 14 June 2023 | Lawrence Goldstien</p>"},{"location":"architecture/Decision-Records/A0001-record-decisions-using-madr/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We must record decisions that have an impact on the delivery of software projects. Decisions must be recorded in a  consistent style, allowing team members to understand the reasons behind a decision and the wider consequences.</p>"},{"location":"architecture/Decision-Records/A0001-record-decisions-using-madr/#considered-options","title":"Considered Options","text":"<ul> <li>MADR - Markdown Any Decision Records</li> <li>ADR Tools - Nat Pryce's ADR Tools</li> <li>Nygard's ADR - The original ADR </li> </ul>"},{"location":"architecture/Decision-Records/A0001-record-decisions-using-madr/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR - Markdown Any Decision Records\", because it allows for recording contextual information, has a  straightforward template format, and optional fields should a decision only require a light touch explainer.</p> <p>Architecture decision records shall be created with the A prefix: i.e.: \"A0001: Record decisions using MADR\".</p>"},{"location":"architecture/Decision-Records/A0001-record-decisions-using-madr/#consequences","title":"Consequences","text":"<p>A template have been created and documentation added explaining the reason for decision records and how to record them.</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"architecture/Decision-Records/template/","title":"Template","text":"<p>Proposed  | 14 June 2023 | [names of decision makers]</p>"},{"location":"architecture/Decision-Records/template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story. You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"architecture/Decision-Records/template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/Decision-Records/template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/Decision-Records/template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"architecture/Decision-Records/template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/Decision-Records/template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"architecture/Decision-Records/template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"architecture/Decision-Records/template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/Decision-Records/template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"architecture/Decision-Records/template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or document the team agreement on the decision and/or define when this decision when and how the decision should be realized and if/when it should be re-visited and/or how the decision is validated. Links to other decisions and resources might here appear as well.}</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"engineering/","title":"Engineering","text":"<p>This is the Engineering CoP landing page.</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"engineering/Decision-Records/","title":"Decision Records","text":""},{"location":"engineering/Decision-Records/#why-record-decisions","title":"Why record decisions?","text":"<p>Most projects will make decisions that are agreed upon by team members and drastically impact the path taken to fulfil the project's requirements. Recording these decisions is an important part of project governance and eases onboarding for new developers.</p>"},{"location":"engineering/Decision-Records/#how-to-record-decisions","title":"How to record decisions","text":"<p>Decisions can be recorded in short-form or long-form, to provide the best results, long-form decision records should be used where possible. A good choice for the first decision record of a project is recording that you will in fact, record decisions.</p>"},{"location":"engineering/Decision-Records/#short-decision-record-example","title":"Short Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because it is a standard framework and the features of the other frameworks do not\noutweigh the drawback of adding a new dependency.\n</code></pre>"},{"location":"engineering/Decision-Records/#long-decision-record-example","title":"Long Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because comes out best (see below).\n\n### Consequences\n\n* Good, because tests are more readable\n* Good, because more easy to write tests\n* Good, because more readable assertions\n* Bad, because more complicated testing leads to more complicated assertions\n\n## Pros and Cons of the Options\n\n### Plain JUnit5\n\nHomepage: &lt;https://junit.org/junit5/docs/current/user-guide/&gt;\nJabRef testing guidelines: &lt;https://devdocs.jabref.org/getting-into-the-code/code-howtos#test-cases&gt;\n\nExample:\n\n```java\nString actual = markdownFormatter.format(source);\nassertTrue(actual.contains(\"Markup&lt;br /&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item one&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item 2&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&gt; rest\"));\nassertFalse(actual.contains(\"\\n\"));\n```\n\n* Good, because Junit5 is \"common Java knowledge\"\n* Bad, because complex assertions tend to get hard to read\n* Bad, because no fluent API\n\n### Hamcrest\n\nHomepage: &lt;https://github.com/hamcrest/JavaHamcrest&gt;\n\n* Good, because offers advanced matchers (such as `contains`)\n* Bad, because not full fluent API\n* Bad, because entry barrier is increased\n\n### AssertJ\n\nHomepage: &lt;https://joel-costigliola.github.io/assertj/&gt;\n\nExample:\n\n```java\nassertThat(markdownFormatter.format(source))\n        .contains(\"Markup&lt;br /&gt;\")\n        .contains(\"&lt;li&gt;list item one&lt;/li&gt;\")\n        .contains(\"&lt;li&gt;list item 2&lt;/li&gt;\")\n        .contains(\"&gt; rest\")\n        .doesNotContain(\"\\n\");\n```\n\n* Good, because offers fluent assertions\n* Good, because allows partial string testing to focus on important parts\n* Good, because assertions are more readable\n* Bad, because not commonly used\n* Bad, because newcomers have to learn an additional language to express test cases\n* Bad, because entry barrier is increased\n* Bad, because expressions of test cases vary from unit test to unit test\n\n## More Information\n\nGerman comparison between Hamcrest and AssertJ: &lt;https://www.sigs-datacom.de/uploads/tx_dmjournals/philipp_JS_06_15_gRfN.pdf&gt;.\n</code></pre> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"engineering/Decision-Records/E0001-record-decisions-using-madr/","title":"E0001: Record decisions using MADR","text":"<p>Proposed  | 14 June 2023 | Lawrence Goldstien</p>"},{"location":"engineering/Decision-Records/E0001-record-decisions-using-madr/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We must record decisions that have an impact on the delivery of software projects. Decisions must be recorded in a  consistent style, allowing team members to understand the reasons behind a decision and the wider consequences.</p>"},{"location":"engineering/Decision-Records/E0001-record-decisions-using-madr/#considered-options","title":"Considered Options","text":"<ul> <li>MADR - Markdown Any Decision Records</li> <li>ADR Tools - Nat Pryce's ADR Tools</li> <li>Nygard's ADR - The original ADR </li> </ul>"},{"location":"engineering/Decision-Records/E0001-record-decisions-using-madr/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR - Markdown Any Decision Records\", because it allows for recording contextual information, has a  straightforward template format, and optional fields should a decision only require a light touch explainer.</p> <p>Engineering decision records shall be created with the E prefix: i.e.: \"E0001: Record decisions using MADR\".</p>"},{"location":"engineering/Decision-Records/E0001-record-decisions-using-madr/#consequences","title":"Consequences","text":"<p>A template have been created and documentation added explaining the reason for decision records and how to record them.</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"engineering/Decision-Records/template/","title":"Template","text":"<p>Proposed  | 14 June 2023 | [names of decision makers]</p>"},{"location":"engineering/Decision-Records/template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story. You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"engineering/Decision-Records/template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"engineering/Decision-Records/template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"engineering/Decision-Records/template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"engineering/Decision-Records/template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"engineering/Decision-Records/template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"engineering/Decision-Records/template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"engineering/Decision-Records/template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"engineering/Decision-Records/template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"engineering/Decision-Records/template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or document the team agreement on the decision and/or define when this decision when and how the decision should be realized and if/when it should be re-visited and/or how the decision is validated. Links to other decisions and resources might here appear as well.}</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"playbooks/","title":"Introduction","text":"<p>Playbooks are essential in defining an organisation's \"way\", that is the approach taken when creating services like  APIs, websites, or conducting user research. They are living documentation and should be continually updated to reflect  the latest decisions of the community.</p> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"playbooks/API-Playbook/","title":"API Playbook","text":"<p>APIs are an essential part of modern software development, and when correctly managed, APIs can reduce time to production for digital transformation projects.</p> <p>This API playbook will help readers understand:</p> <ul> <li>How we go about building our APIs</li> <li>How we support and maintain our APIs</li> <li>Best practices that we have adopted as standard in our development of APIs</li> </ul>"},{"location":"playbooks/API-Playbook/#criteria-for-new-apis","title":"Criteria for New APIs","text":"<p>New APIs must meet the following criteria before being considered production ready.</p> Your API fulfills an established need. <ul> <li>The API supports one or more services that provide value to users.</li> <li>The APIs scope is too distinct for inclusion in an existing API.</li> </ul> You API source code is public. <ul> <li>Use open source code to improve transparency, flexibility and accountability.</li> <li>When using open source code, ensure you attribute its source and contribute improvements back to the community.</li> </ul> Your API meets security guidelines. <ul> <li>Authentication is via OAuth 2.0 and Azure AD.</li> <li>User permissions are granted via Azure AD group membership.</li> <li>Access control operates at the endpoint, model or property level.</li> <li>API to API access keys are never stored unencrypted </li> </ul> Your API minimises data collection. <ul> <li>Reuse or extend existing APIs to avoid duplication of datasets.</li> <li>You have permission to use the data stored or processed by the API.</li> <li>You ensure that any services or downstream APIs also have permission to use and process the data.</li> </ul> You have an established support plan. <ul> <li>You have identified a product owner for the API.</li> <li>You have identified which team is responsible for:<ul> <li>Iterating and improving the API frequently.</li> <li>Continually scanning for and remediating security vulnerabilities.</li> <li>Monitoring the API and responding to alerts and incidents.</li> <li>Optimise the performance of all parts of the API.</li> </ul> </li> <li>You have an incident response plan that is documented and can be accessed by all team members, security and     operations.</li> <li>You have a plan to decommission the API should it no longer provide value.</li> </ul> You have identified how to measure the success of the API. <ul> <li>You must record: number of requests, number of active integrated services, cost per request, average     response time, availability.</li> <li>You combine metrics with user research to understand where improvements can be made.</li> <li>You monitor for downtime using canary requests from external services.</li> </ul> Your API is clearly documented. <ul> <li>Publishes documentation using the OpenAPI standard.</li> <li>Meets our API design principles and naming conventions.</li> </ul> Your API is tested, then deployed. <ul> <li>Ideally, Acceptance Test Driven Development (ATDD) is used to create the API.</li> <li>Acceptance, Integration, Unit and Security tests are run whenever new code is added.</li> <li>No production code is written without tests that cover its functionality.</li> <li>When changes are merged into the main branch of source code they are tested, then deployed to staging and     production environments.</li> </ul> You deploy to several environments. <ul> <li>Functionally, staging and production environments are the same.</li> <li>A sandbox environment exists to aid in developing integrations.</li> </ul> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"},{"location":"playbooks/API-Playbook/conventions/","title":"Conventions","text":""},{"location":"playbooks/API-Playbook/conventions/#documentation","title":"Documentation","text":""},{"location":"playbooks/API-Playbook/conventions/#types","title":"Types","text":"<p>MUST include text documentation.</p> <p>Documentation must be provided that:</p> <ul> <li>Has steps needed to set up a local development environment.</li> <li>Has a summary of the APIs purpose and main data models it stores.</li> <li>Has a runbook.</li> </ul> <p>MUST include machine-readable API specification.</p> <p>MUST include a development and architectural decision record.</p> <p>A decision record must be included to document major technology and design choices.</p>"},{"location":"playbooks/API-Playbook/conventions/#format","title":"Format","text":"<p>MUST use Markdown format for documentation.</p> <p>Text documentation must be written in Markdown format.</p> <p>MUST use OpenAPI to document REST APIs.</p> <p>The OpenAPI specification is machine-readable and can be rendered to HTML, providing an interactive and human-readable suite of documentation.</p> <p>MUST use MADR format to document decisions.</p> <p>As per E0001: Record decisions using MADR all decision records must use MADR format. Decision records must be kept under <code>docs/decisions/</code>, each filename must be in format <code>docs/decisions/&lt;reference&gt;-&lt;hyphen separated title&gt;.md</code>.</p>"},{"location":"playbooks/API-Playbook/conventions/#place","title":"Place","text":"<p>MUST place documentation next to code.</p> <p>Where all code for a project is stored in the same repository, documentation must be placed in the same repository in the <code>docs/</code> directory.</p> <p>Where code for a project spans multiple repositories, documentation specific to each codebase must be placed in the  <code>docs/</code> directory for each repository.</p> <p>MUST publish documentation.</p> <p>Using a tool like mkdocs, documentation must be rendered and published to a publicly  accessible website.</p>"},{"location":"playbooks/API-Playbook/conventions/#naming","title":"Naming","text":""},{"location":"playbooks/API-Playbook/conventions/#paths","title":"Paths","text":"<p>MUST use lowercase separate words with hyphens for url path segments.</p> <pre><code>/shipment-orders/{shipment-order-id}\n</code></pre> <p>This applies to concrete path segments and not the names of path parameters. For example <code>{shipment_order_id}</code> would be ok as a path parameter.</p> <p>MUST avoid trailing slashes</p> <p>The trailing slash must not have specific semantics. Resource paths must deliver the same results whether they have the trailing slash or not.</p> <pre><code>/posts/ === /posts\n</code></pre>"},{"location":"playbooks/API-Playbook/conventions/#query-parameters","title":"Query Parameters","text":"<p>MUST use snake_case for Query Parameters.</p> <pre><code>customer_number, order_id, billing_address\n</code></pre> <p>MUST use conventional query parameters.</p> <p>If you provide query support for searching, sorting, filtering, and paginating, you must stick to the following naming conventions:</p> <ul> <li> <p><code>q</code> - default query parameter (e.g. used by browser tab completion); should have an entity specific alias, like   <code>post-id</code> for a blog post.</p> </li> <li> <p><code>sort</code> - comma-separated list of fields to define the sort order. To indicate sorting direction, fields may be   prefixed with + (ascending) or - (descending), e.g. <code>/sales-orders?sort=+id</code></p> </li> <li> <p><code>fields</code> - to retrieve only a subset of fields of a resource</p> </li> <li> <p><code>embed</code> - to expand or embed sub-entities (i.e.: inside of an article entity, expand comments into the comments   object). Implementing embed correctly is difficult, so do it with care</p> </li> <li> <p><code>offset</code> - numeric offset of the first element on a page. See pagination section</p> </li> <li> <p><code>limit</code> - client suggested limit to restrict the number of entries on a page.</p> </li> </ul>"},{"location":"playbooks/API-Playbook/conventions/#resource-names","title":"Resource Names","text":"<p>MUST pluralise resource names.</p> <pre><code>/posts\n/posts/{post-id}\n/posts/{post-id}/comments\n/posts/{post-id}/comments/{comment-id}\n</code></pre> <p>Usually, a collection of resource instances is provided, in the special case of a resource singleton they are treated as a collection with cardinality 1.</p> <p>For example, a user only has a single record of system settings key value pairs, this can be presented as follows.</p> <pre><code>/user/{user-id}/settings\n</code></pre> <p>Work in Progress!</p> <p>This documentation is a work in progress and any opinions contained here are intended to spark discussion within each discapline's community of practice. </p> <p>To remove this message, edit <code>mkdocs.yml</code> and <code>mkdocs.development.yml</code> to remove the line  <code>- snippets/work-in-progress.md</code></p>"}]}