{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Work in Progress!</p> <p>This documentation is a work in progress.  To check what types of components exist, check out the Kitchen Sink. To remove this message, edit <code>docs/index.md</code> and delete <code>docs/kitchen-sink.md</code>.</p>"},{"location":"#what-is-a-community-of-practice","title":"What is a Community of Practice?","text":"<p>A community of practice (CoP) is a group of people who share a concern or a passion for something they do and learn how to do it better as they interact regularly. CoPs are for people who share common job roles, responsibilities or remits. </p> <p>A CoP can evolve naturally because of the members' common interest in a particular domain or area, or it can be created  deliberately with the goal of gaining knowledge related to a specific field. It is through the process of sharing  information and experiences with the group that members learn from each other, and have an opportunity to develop  personally and professionally.</p> <p>You can find out more about how to set up a CoP around a specific discipline on the  Community Development Framework guidance pages from  GOV.UK.</p>"},{"location":"#community-landing-pages","title":"Community Landing Pages","text":"<p>Architecture Development</p> <p>Creating a new community</p> <p>To create a new landing page, decide on your community name and create a new file at <code>docs/&lt;community&gt;/index.md</code>.</p>"},{"location":"kitchen-sink/","title":"Kitchen Sink","text":""},{"location":"kitchen-sink/#abbreviations","title":"Abbreviations","text":"<p>This template comes with a lot of built-in abbreviations. To use them just type an abbreviation, and it will be annotated.</p> <ul> <li>WCAG</li> <li>NaN</li> <li>W3C</li> </ul> <p>If an abbreviation is missing, just add it to the <code>snippets/abbreviations.md</code> file.</p> <p>Only in production!</p> <p>The abbreviations will only render when you run <code>make build</code>, they do not show with <code>make dev</code>.</p>"},{"location":"kitchen-sink/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>You can include keyboard shortcuts in your documentation using the following formatting.</p> <p>To copy, press Ctrl+C or Cmd+C</p> <pre><code>To copy, press ++ctrl+c++ or ++cmd+c++\n</code></pre>"},{"location":"kitchen-sink/#definition-lists","title":"Definition lists","text":"<p>Definition lists or <code>dl</code> tags, are useful anywhere you need a list of key-value pairs.</p> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p>"},{"location":"kitchen-sink/#tables","title":"Tables","text":"<p>Normal Markdown tables, nothing new here.</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"kitchen-sink/#math-and-latex","title":"Math and Latex","text":"<p>You can use the MathJax library to display both inline and centred equations, or formatted text.</p>"},{"location":"kitchen-sink/#inline","title":"Inline","text":"<pre><code>Albert Einstein\u2019s famous energy-mass equation, $E = mc^ 2$ is one of the greatest marvels of this universe.\n</code></pre> <p>Albert Einstein\u2019s famous energy-mass equation, \\(E = mc^ 2\\) is one of the greatest marvels of this universe.</p>"},{"location":"kitchen-sink/#centred","title":"Centred","text":"<pre><code>Albert Einstein\u2019s famous energy-mass equation, is one of the greatest marvels of this universe.\n\n$$\nE = mc^ 2\n$$\n</code></pre> <p>Albert Einstein\u2019s famous energy-mass equation, is one of the greatest marvels of this universe.</p> \\[E = mc^ 2\\]"},{"location":"kitchen-sink/#icons-and-emojis","title":"Icons and Emojis","text":"<p>To include icons and emoji, use the same syntax you would on slack. </p> <p>For example, <code>:material-account-child-outline:</code> produces .</p>"},{"location":"kitchen-sink/#available-libraries","title":"Available Libraries","text":"<ul> <li>Material Design Icons (prefix with <code>:material-</code>)</li> <li>Font Awesome Icons (prefix with <code>:fontawesome-</code>)</li> <li>Octicons (prefix with <code>:octicons-</code>)</li> </ul>"},{"location":"kitchen-sink/#plantuml-diagrams","title":"PlantUML Diagrams","text":"<p>PlantUML diagrams use the PlantUML web service to render diagrams. They support click to zoom, allowing more complex  diagrams. Take a look at Architecture-&gt;Diagramming for a more thorough explainer on how to use PlantUML diagrams for technical documentation.</p> <pre><code>@startuml\n!include &lt;C4/C4_Container&gt;\n\nPerson(personAlias, \"Label\", \"Optional Description\")\nContainer(containerAlias, \"Label\", \"Technology\", \"Optional Description\")\nSystem(systemAlias, \"Label\", \"Optional Description\")\n\nSystem_Ext(extSystemAlias, \"Label\", \"Optional Description\")\n\nRel(personAlias, containerAlias, \"Label\", \"Optional Technology\")\n\nRel_U(systemAlias, extSystemAlias, \"Label\", \"Optional Technology\")\n@enduml</code></pre>"},{"location":"kitchen-sink/#basic-diagrams","title":"Basic Diagrams","text":"<p>Basic diagramming uses the mermaid library. This template uses version 9.4.3 and does  not support click to zoom.</p>"},{"location":"kitchen-sink/#flowchart","title":"Flowchart","text":"<p>Documentation</p> <pre><code>flowchart LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]</code></pre>"},{"location":"kitchen-sink/#sequence-diagram","title":"Sequence Diagram","text":"<p>Documentation</p> <pre><code>sequenceDiagram\n    par Alice to Bob\n        Alice-&gt;&gt;Bob: Hello guys!\n    and Alice to John\n        Alice-&gt;&gt;John: Hello guys!\n    end\n    Bob--&gt;&gt;Alice: Hi Alice!\n    John--&gt;&gt;Alice: Hi Alice!</code></pre>"},{"location":"kitchen-sink/#class-diagram","title":"Class Diagram","text":"<p>Documentation</p> <pre><code>classDiagram\n    note \"From Duck till Zebra\"\n    Animal &lt;|-- Duck\n    note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\"\n    Animal &lt;|-- Fish\n    Animal &lt;|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }</code></pre>"},{"location":"kitchen-sink/#state-diagram","title":"State Diagram","text":"<p>Documentation</p> <pre><code>stateDiagram\n    direction LR\n    [*] --&gt; A\n    A --&gt; B\n    B --&gt; C\n    state B {\n      direction LR\n      a --&gt; b\n    }\n    B --&gt; D</code></pre>"},{"location":"kitchen-sink/#entity-relationship","title":"Entity Relationship","text":"<p>Documentation</p> <pre><code>erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    CUSTOMER {\n        string name\n        string custNumber\n        string sector\n    }\n    ORDER ||--|{ LINE-ITEM : contains\n    ORDER {\n        int orderNumber\n        string deliveryAddress\n    }\n    LINE-ITEM {\n        string productCode\n        int quantity\n        float pricePerUnit\n    }</code></pre>"},{"location":"kitchen-sink/#user-journey","title":"User Journey","text":"<p>Documentation</p> <pre><code>journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 5: Me</code></pre>"},{"location":"kitchen-sink/#gantt","title":"Gantt","text":"<p>Documentation</p> <pre><code>gantt\n    dateFormat  YYYY-MM-DD\n    title       Adding GANTT diagram functionality to mermaid\n    excludes    weekends\n    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".)\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2              :         des4, after des3, 5d\n\n    section Critical tasks\n    Completed task in the critical line :crit, done, 2014-01-06,24h\n    Implement parser and jison          :crit, done, after des1, 2d\n    Create tests for parser             :crit, active, 3d\n    Future task in critical line        :crit, 5d\n    Create tests for renderer           :2d\n    Add to mermaid                      :1d\n    Functionality added                 :milestone, 2014-01-25, 0d\n\n    section Documentation\n    Describe gantt syntax               :active, a1, after des1, 3d\n    Add gantt diagram to demo page      :after a1  , 20h\n    Add another diagram to demo page    :doc1, after a1  , 48h\n\n    section Last section\n    Describe gantt syntax               :after doc1, 3d\n    Add gantt diagram to demo page      :20h\n    Add another diagram to demo page    :48h</code></pre>"},{"location":"kitchen-sink/#pie-chart","title":"Pie Chart","text":"<p>Documentation</p> <pre><code>pie showData\n    title Key elements in Product X\n    \"Calcium\" : 42.96\n    \"Potassium\" : 50.05\n    \"Magnesium\" : 10.01\n    \"Iron\" :  5</code></pre>"},{"location":"kitchen-sink/#requirement","title":"Requirement","text":"<p>Documentation</p> <pre><code>requirementDiagram\n\n    requirement test_req {\n    id: 1\n    text: the test text.\n    risk: high\n    verifymethod: test\n    }\n\n    functionalRequirement test_req2 {\n    id: 1.1\n    text: the second test text.\n    risk: low\n    verifymethod: inspection\n    }\n\n    performanceRequirement test_req3 {\n    id: 1.2\n    text: the third test text.\n    risk: medium\n    verifymethod: demonstration\n    }\n\n    interfaceRequirement test_req4 {\n    id: 1.2.1\n    text: the fourth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    physicalRequirement test_req5 {\n    id: 1.2.2\n    text: the fifth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    designConstraint test_req6 {\n    id: 1.2.3\n    text: the sixth test text.\n    risk: medium\n    verifymethod: analysis\n    }\n\n    element test_entity {\n    type: simulation\n    }\n\n    element test_entity2 {\n    type: word doc\n    docRef: reqs/test_entity\n    }\n\n    element test_entity3 {\n    type: \"test suite\"\n    docRef: github.com/all_the_tests\n    }\n\n\n    test_entity - satisfies -&gt; test_req2\n    test_req - traces -&gt; test_req2\n    test_req - contains -&gt; test_req3\n    test_req3 - contains -&gt; test_req4\n    test_req4 - derives -&gt; test_req5\n    test_req5 - refines -&gt; test_req6\n    test_entity3 - verifies -&gt; test_req5\n    test_req &lt;- copies - test_entity2</code></pre>"},{"location":"kitchen-sink/#git-graph","title":"Git Graph","text":"<p>Documentation</p> <pre><code>gitGraph:\n    commit \"Ashish\"\n    branch newbranch\n    checkout newbranch\n    commit id:\"1111\"\n    commit tag:\"test\"\n    checkout main\n    commit type: HIGHLIGHT\n    commit\n    merge newbranch\n    commit\n    branch b2\n    commit</code></pre>"},{"location":"architecture/diagramming/","title":"Why diagram?","text":"<p>During developing a software solution engineers must communicate the place of a system within a wider portfolio, the context of the system, and the components that make up that system. While written communication is widely used, it can  lead to differing mental models of a software system.</p> <p>This is where effective diagramming comes in, presenting abstracted contextual views of the software system. These views  will enable technical and non-technical participants to have a shared vision of the system and aid in discussing issues that present themselves during development.</p> <p>To ensure diagrams clearly communicate the intended contextual information it's a good idea to assess diagrams for  clarity. The C4 Diagram Bingo card can make assessing diagrams more engaging.</p> <p>For more information on C4 diagramming see the C4 website.</p>"},{"location":"architecture/diagramming/#core-diagrams","title":"Core Diagrams","text":"<p>The core diagrams describe the system in abstract terms and focus on the context, containers and components of the system. C4 modelling includes more diagram types, but some place an additional maintenance burden on developers that is not outweighed by the information conveyed.</p>"},{"location":"architecture/diagramming/#context-diagram","title":"Context Diagram","text":"<p>The context diagram shows the high level parts of the system, users that interact with them, and the external or  third-party systems integrated with the system.</p> <p>Detail isn't important here as this is your zoomed out view showing a big picture of the system landscape. The focus  should be on people (actors, roles, personas, etc) and software systems rather than technologies, protocols and other  low-level details. It's the sort of diagram that you could show to non-technical people.</p> <pre><code>@startuml\n'ref http://plantuml.com/stdlib\n!include &lt;C4/C4_Context&gt;\n!include &lt;office/Users/user.puml&gt;\n\ntitle Social Care Case Management Context Diagram\n\nPerson(care_practitioners, Social Care Practitioner, \"&lt;$user&gt; &lt;$user&gt;\\n Adult and Children\")\nPerson_Ext(external_referrers, External Referrers, \"&lt;$user&gt; &lt;$user&gt;\\n Doctors, Police, Teachers ...\")\nPerson(data_insight_team, Data and Insight Team)\n\nSystem_Boundary(system, \"Social Care\") {\n  System(mash_referral, \"MASH Referrals\", \"Processes incoming Referrals\")\n  System(social_care_cases, \"Social Care Case Management\", \"Practitioners to manage case information.\")\n  System(social_care_workflows, \"Core Pathways\", \"Practitioners to manage case workflows.\")\n  System_Ext(qlik, \"Qlik Analytics\", \"ETL &amp; Case progress reporting\")\n  System_Ext(google, \"Google Services\", \"Forms\\nSheets\\nDocs\\nGroups\")\n  System_Ext(social_care_finance, \"Social Care Finance\", \"Care package management, procurement and accounting.\")\n}\n\nRel(care_practitioners, social_care_cases, \"Manage cases using\")\nRel(care_practitioners, qlik, \"View / create dashboards and reports\")\nRel(care_practitioners, google, \"Redirected by Social Care App to add data in\")\nRel(data_insight_team, qlik, \"Manage data extraction and reporting pipelines\")\nRel(qlik, social_care_cases, \"Hourly data export\")\nRel(google, qlik, \"Data ingestion via Google API\")\nRel(social_care_cases, google, \"Authenticates with groups and view Google Docs\")\nRel(social_care_workflows, google, \"Authenticates with groups and view Google Docs\")\nRel(external_referrers, google, \"Submit referrals via public form\")\nBiRel(google, mash_referral, \"Proxy referrals. Generate google docs\")\nRel(mash_referral, social_care_cases, \"Submit to\")\nBiRel(social_care_finance, social_care_cases, \"TBD\")\nRel(care_practitioners, social_care_workflows, \"Start an assessment\")\nBiRel(social_care_cases, social_care_workflows, \"Share resident data\")\nBiRel(social_care_finance, social_care_workflows, \"TBD\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: Hackney Social Care Context Diagram</p> <p>System Context Diagram Details</p> <p>Scope: A single software system.</p> <p>Primary elements: The software system in scope.</p> <p>Supporting elements: People (e.g. users, actors, roles, or personas) and software systems (external  dependencies) that are directly connected to the software system in scope. Typically these other software systems  sit outside the scope or boundary of your own software system, and you don't have responsibility or ownership of  them.</p> <p>Intended audience: Everybody, both technical and non-technical people, inside and outside of the software  development team.</p> <p>Recommended for most teams: Yes.</p>"},{"location":"architecture/diagramming/#container-diagram","title":"Container Diagram","text":"<p>Zooming in by one level, the container diagram (nothing to do with docker containers) splits out each application within the system by its constituent containers. Containers can be APIs, frontend applications, and databases, amongst other  things.</p> <p>The Container diagram shows the high-level shape of the software architecture and how responsibilities are distributed  across it. It also shows the major technology choices and how the containers communicate with one another. It's a  simple, high-level technology focussed diagram that is useful for software developers and support/operations staff  alike.</p> <pre><code>@startuml\n!include &lt;C4/C4_Container&gt;\n\n'ref http://plantuml.com/stdlib\n!include &lt;office/Users/user.puml&gt;\n!include &lt;office/Users/mobile_user.puml&gt;\n\ntitle Social Care System Container Diagram\n\nPerson(care_practitioners, Social Care Practitioner, \"&lt;$user&gt; &lt;$user&gt;\\n Adult and Children\" )\nPerson(data_insight_team, Data and Insight Team )\n\nSystem_Ext(qlik, \"Qlik Analytics\", \"ETL &amp; Case progress reporting\")\n\nSystem_Boundary(googles, \"Google\") {\n  System_Ext(google_auth, \"Google Groups\", \"Provides User Authentication and Authorisation\")\n  System_Ext(google_forms, \"Google Forms\", \"Data submissions (57 forms)\")\n  System_Ext(google_sheets, \"Google Sheets\", \"Form submission data\")\n  System_Ext(google_docs, \"Google Docs\", \"Generated for viewing (AppScript)\")\n}\n\nSystem_Boundary(system, \"Social Care\") {\n  System_Boundary(case-management, \"Case Management\") {\n    Container(social_care_front_end, \"Social Care Front End\", \"Lambda, Next.js (React)\", \"Allows practitioners to edit case information.\")\n    Container(social_care_service_api, \"Social Care Case Viewer Service API\", \"Lambda, C#\", \"Provides backend API for the Social Care Front End\")\n  }\n\n  System_Boundary(core-pathways, \"Core Pathways\") {\n    Container(social_care_core_pathways, \"Social Care Core Pathways Front End\", \"Lambda, Next.js (React)\", \"Allows practitioners to create new assessments against a resident/case.\")\n  }\n\n  System_Boundary(finance, \"Finance\") {\n    Container(adult_social_care_front_end, \"Adult Social Care Care Package Builder Front End\", \"Lambda, React\", \"Allows adult social care workers to build and manage care packages.\")\n    Container(adult_social_care_api, \"Adult Social Care Care Package Builder API\", \"Lambda, .NET (C#)\", \"Allows adult social care workers to build and manage care packages.\")\n    Container(adult_social_care_transactions_api, \"Adult Social Care Package Builder Transactions API\", \"Lambda, .NET (C#)\", \"Manages transactions and payments relating to adult social care.\")\n  }\n}\n\nRel(care_practitioners, social_care_front_end, \"Manage cases using\", \"JSON/HTTPS\")\nRel(care_practitioners, social_care_core_pathways, \"Manage assessments for cases/residents\", \"JSON/HTTPS\")\nRel(care_practitioners, google_forms, \"Redirected by Social Care App to add data in\", \"JSON/HTTPS\")\nRel(care_practitioners, google_docs, \"Redirected by Social Care App to view form submissions\", \"HTTPS\")\nRel(care_practitioners, qlik, \"View / create dashboards and reports\")\nRel(care_practitioners, adult_social_care_front_end, \"Create care packages using\", \"JSON/HTTPS\")\n\nRel(adult_social_care_front_end, adult_social_care_api, \"Manage care packages using\", \"JSON/HTTPS\")\nRel(adult_social_care_api, adult_social_care_transactions_api, \"Manage transactions / payments using\", \"JSON/HTTPS\")\n\nRel(social_care_core_pathways, social_care_service_api, \"Get case / resident details\", \"JSON/HTTPS\")\n\nRel_D(data_insight_team, qlik, \"Manage data extraction and reporting pipelines\")\n\nRel(social_care_front_end, social_care_service_api, \"Read / Write\", \"JSON/HTTPS\")\nRel(social_care_front_end, google_auth, \"Authenticates practitioners via\", \"JSON/HTTPS\")\n\nRel(qlik, social_care_service_api, \"Hourly CSV export of form data to S3\", \"Qlik / AWS integration\")\n\nRel(google_forms, google_sheets, \"Submitted data stored in\")\nRel(google_sheets, qlik, \"Data ingestion\", \"Google API\")\nRel(google_sheets, google_docs, \"Generated from form data\")\nRel_U(google_docs, google_auth, \"Access restricted with\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: Hackney Social Care Container Diagram</p> <p>Container Diagram Details</p> <p>Scope: A single software system.</p> <p>Primary elements: Containers within the software system in scope.</p> <p>Supporting elements: People and software systems directly connected to the containers.</p> <p>Intended audience: Technical people inside and outside of the software development team; including software  architects, developers and operations/support staff.</p> <p>Recommended for most teams: Yes.</p> <p>Notes: Notes: This diagram says nothing about clustering, load balancers, replication, failover, etc because it  will likely vary across different environments (e.g. production, staging, development, etc). This information is  better captured via one or more deployment diagrams.</p>"},{"location":"architecture/diagramming/#component-diagram","title":"Component Diagram","text":"<p>The Component diagram shows how a container is made up of a number of \"components\", what each of those components are,  their responsibilities and the technology/implementation details.</p> <pre><code>@startuml\n!include &lt;C4/C4_Component&gt;\n\ntitle Component diagram for Internet Banking System - API Application\n\nContainer(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\")\nContainer(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset ot the internet banking functionality to customers via their mobile mobile device.\")\nContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\nSystem_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\nContainer_Boundary(api, \"API Application\") {\n    Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\")\n    Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\")\n    Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\")\n    Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\")\n\n    Rel(sign, security, \"Uses\")\n    Rel(accounts, mbsfacade, \"Uses\")\n    Rel(security, db, \"Read &amp; write to\", \"JDBC\")\n    Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\")\n}\n\nRel(spa, sign, \"Uses\", \"JSON/HTTPS\")\nRel(spa, accounts, \"Uses\", \"JSON/HTTPS\")\n\nRel(ma, sign, \"Uses\", \"JSON/HTTPS\")\nRel(ma, accounts, \"Uses\", \"JSON/HTTPS\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: C4 Model Sample Component Diagram</p> <p>Component Diagram Details</p> <p>Scope: A single container.</p> <p>Primary elements: Components within the container in scope.</p> <p>Supporting elements: Containers (within the software system in scope) plus people and software systems directly  connected to the components.</p> <p>Intended audience: Software architects and developers.</p> <p>Recommended for most teams: No, only create component diagrams if you feel they add value, and consider  automating their creation for long-lived documentation.</p>"},{"location":"architecture/diagramming/#additional-diagrams","title":"Additional Diagrams","text":""},{"location":"architecture/diagramming/#system-landscape-diagram","title":"System Landscape Diagram","text":"<p>The system landscape can be useful in contextualising an entire ecosystem. From a practical perspective, a system  landscape diagram is really just a system context diagram without a specific focus on a particular software system.</p> <pre><code>@startuml\n'ref http://plantuml.com/stdlib\n!include &lt;C4/C4_Context&gt;\n\ntitle Social Care System Landscape Diagram\n\nPerson(care_practitioners, Social Care Practitioners, \"Adult and Children\")\nPerson_Ext(external_referrers, External Referrers, \"Doctors, Police, Teachers ...\")\nPerson(data_insight_team, Data and Insight Team)\n\nPerson(brokerage_team, Brokerage team)\nPerson(care_charge_team, Care charge team) \nPerson(pay_runs_team, Pay runs team)\nPerson(cedar_team, Cedar team)\n\nSystem_Boundary(system, \"Social Care\") {\n  System(social_care_cases, \"Social Care Case Management\", \"Manage case information.\", $link=\"https://lbhackney-it.github.io/social-care-architecture/#social-care-case-management-context-diagram\")\n  System(social_care_core_pathways, \"Social Care Core Pathways\", \"Manage assessment information.\")\n  System(social_care_finance, \"Social Care Finance\", \"Care package management, procurement and accounting.\")\n  System_Ext(qlik, \"Qlik Analytics\", \"ETL &amp; Case progress reporting\")\n  System_Ext(google, \"Google Services\", \"User Groups\\nForms (Sheets)\\nDocs\")\n  System_Ext(cedar, \"Cedar\", \"Central Finance Platform\")\n  System(document_management, \"Document Management System\")\n}\n\nRel(care_practitioners, social_care_cases, \"Manage cases\")\nRel(care_practitioners, social_care_core_pathways, \"Manage assessments\")\nRel(care_practitioners, qlik, \"View / create dashboards and reports\")\nRel(care_practitioners, google, \"Redirected from case system to add / view data in google forms &amp; docs\")\nRel(data_insight_team, qlik, \"Manage data extraction and reporting pipelines\")\nRel(qlik, social_care_cases, \"Hourly data export\")\nBiRel(document_management, social_care_finance, \"Document uploads/downloads\")\nRel(cedar_team, cedar, \"Cedar finance package\")\nRel(pay_runs_team, social_care_finance, \"Manage invoices and purchase orders\")\nRel(pay_runs_team, cedar_team, \"Cedar finance package\")\nRel(pay_runs_team, cedar, \"Cedar finance package\")\nRel(pay_runs_team, brokerage_team, \"Brokerage packages\")\nRel(google, qlik, \"Data ingestion via Google API\")\nRel(social_care_cases, google, \"Authenticate users\")\nRel(social_care_core_pathways, google, \"Authenticate users\")\nRel(social_care_core_pathways, social_care_cases, \"Get resident data\")\nRel_L(external_referrers, google, \"Submit referrals via public form\")\nRel(cedar,social_care_finance, \"Supplier information\")\nBiRel(google, social_care_cases, \"Proxy referrals. Generate google docs\")\nRel(social_care_finance, pay_runs_team, \"Cedar fianance package\")\nRel(social_care_cases, social_care_finance, \"Service user information\")\nRel(brokerage_team, social_care_finance, \"Handover\" )\nRel(care_charge_team, social_care_finance, \"Logging care charge values\")\nRel(care_practitioners, brokerage_team, \"Creates a care plan\")\nBiRel(care_practitioners, care_charge_team, \"Financial assessment\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: Hackney Social Care System Landscape Diagram</p> <p>System Landscape Diagram Details</p> <p>Scope: An enterprise/organisation/department/etc.</p> <p>Primary elements: People and software systems related to the chosen scope.</p> <p>Intended audience: Technical and non-technical people, inside and outside of the software development team.</p> <p>Recommended for most teams: Yes.</p>"},{"location":"architecture/diagramming/#deployment-diagram","title":"Deployment Diagram","text":"<p>A deployment diagram allows you to illustrate how instances of software systems and/or containers in the static model  are deployed on to the infrastructure within a given deployment environment.</p> <p>These diagrams are useful when discussing concerns around infrastructure and security with external teams.</p> <pre><code>@startuml\n!include &lt;C4/C4_Deployment&gt;\n\ntitle Social Care System Deployment Diagram\n\nDeployment_Node(aws, \"AWS\", \"Region: eu-west-2\") {\n\n  Deployment_Node(aws_mosaic_production, \"Mosaic-Production\", \"Account\") {\n\n    Deployment_Node(mosaic_production_case_management, \"Case Management\") {\n\n      Deployment_Node(aws_production_apis_api_gateway, \"API Gateway\") {\n        Container(frontend_api_gateway, \"Social Care Frontend\", \"API Gateway\", \"Provides routing.\")\n      }\n\n      Deployment_Node(aws_production_apis_lambda, \"Lambda\") {\n        Container(frontend_api_lambda, \"Social Care Frontend\", \"Lambda, Next.js (React)\", \"Provides the UI/UX of the Social Care System.\")\n      }\n\n      Deployment_Node(aws_mosaic_production_api_gateway, \"API Gateway\") {\n        Container(service_api_api_gateway, \"Social Care Case Viewer API\", \"API Gateway\", \"Provides routing and auth via API keys.\")\n      }\n\n      Deployment_Node(aws_mosaic_production_lambda, \"Lambda\") {\n        Container(service_api_lambda, \"Social Care Case Viewer API\", \"Lambda, C#\", \"Provides service API capabilities to the Social Care System.\")\n        Container(service_api_pg_import_lambda, \"Social Care Case Viewer API - PostgresQL Import\", \"Lambda, C#\", \"Imports allocations.\")\n        Container(service_api_mongodb_import_lambda, \"Social Care Case Viewer API - MongoDB Import\", \"Lambda, C#\", \"Imports form data.\")\n      }\n\n      Deployment_Node(aws_mosaic_production_rds, \"RDS\") {\n        ContainerDb(service_api_rds, \"Social Care Case Viewer API\", \"PostgreSQL\", \"Stores persons, workers and allocations.\")\n        ContainerDb(platform_api_rds, \"Resident Social Care Platform API\", \"PostgreSQL\", \"Stores historic case notes and visits.\")\n      }\n\n      Deployment_Node(aws_mosaic_production_docdb, \"DocumentDB\") {\n        ContainerDb(service_api_docdb, \"Social Care Case Viewer API\", \"MongoDB\", \"Stores form data.\")\n      }\n\n      Deployment_Node(aws_mosaic_production_s3, \"S3\") {\n        Container(service_api_s3, \"Social Care Case Viewer API - Qlik Import\", \"CSV\", \"Stores allocations and form data.\")\n      }\n\n    }\n\n    Deployment_Node(mosaic_production_finance, \"Finance\") {\n\n      Deployment_Node(aws_mosaic_production_api_gateway_finance, \"API Gateway\") {\n        Container(adult_social_care_builder_frontend_api_gateway, \"Adult Social Care Care Package Builder Frontend\", \"API Gateway\", \"Provides routing.\")\n        Container(adult_social_care_builder_api_api_gateway, \"Adult Social Care Care Package Builder API\", \"API Gateway\", \"Provides routing.\")\n        Container(adult_social_care_builder_transactions_api_api_gateway, \"Adult Social Care Care Package Builder Transactions API\", \"API Gateway\", \"Provides routing.\")\n      }\n\n      Deployment_Node(aws_mosaic_production_lambda_finance, \"Lambda\") {\n        Container(adult_social_care_builder_frontend_lambda, \"Adult Social Care Care Package Builder Frontend\", \"Lambda, Next.js (React)\", \"Provides the UI/UX of the Adult Social Care Care Package Builder System.\")\n        Container(adult_social_care_builder_api_lambda, \"Adult Social Care Care Package Builder API\", \"Lambda, C#\", \"Provides service API capabilities to the Adult Social Care Care Package Builder System.\")\n        Container(adult_social_care_builder_transactions_api_lambda, \"Adult Social Care Care Package Builder Transactions API\", \"Lambda, C#\", \"Handles transaction and finance related services to the Adult Social Care Care Package Builder System.\")\n      }\n\n      Deployment_Node(aws_mosaic_production_rds_finance, \"RDS\") {\n        ContainerDb(adult_social_care_builder_api_rds, \"Adult Social Care Care Package Builder API\", \"PostgreSQL\", \"Stores care package related records.\")\n        ContainerDb(adult_social_care_builder_transactions_api_rds, \"Adult Social Care Care Package Builder Transactions API\", \"PostgreSQL\", \"Stores transaction records related to care packages.\")\n      }\n    }\n\n    Deployment_Node(mosaic_production_social_care_referrals, \"Social Care Referrals (MASH) Data Processing\") {\n      Deployment_Node(aws_mosaic_production_S3_proxy_api_gateway, \"S3 API Gateway Proxy\") {\n        Container(social_care_s3_api_gateway, \"Social Care Referrals S3 API\", \"API Gateway\", \"Provides API proxy that accepts HTTP requests to add objects to S3\")\n        Container(social_care_referrals_aws_s3, \"Social Care Referrals S3 Bucket\", \"Mash form data, JSON\", \"Stores form data submitted via the MASH referral form\")\n      }\n\n      Deployment_Node(aws_mosaic_production_referrals_lambda, \"Lambda\") {\n        Container(social_care_referrals_lambda, \"Social Care Referral Form Data Ingestion\", \"Typescript\", \"Gets referral data from S3, creates Google Doc and sends the data to be stored in the Social Care Case Management System\")\n      }\n\n      Deployment_Node(aws_mosaic_production_referrals_sqs, \"SQS\") {\n        Container(social_care_referrals_aws_sqs, \"Social Care Referrals Queue\", \"Main queue, Deadletter queue\", \"Receives an event notification from S3 when an object is created in the bucket\")\n      }\n    }\n  }\n\n  Deployment_Node(aws_workflows_production, \"Social-Care-Workflows-Production\", \"Account\") {\n      Deployment_Node(aws_workflows_production_api_gateway, \"API Gateway\") {\n        Container(social_care_workflows_frontend_api_gateway, \"Social Care Core Pathways Frontend\", \"API Gateway\", \"Provides routing.\")\n      }\n\n      Deployment_Node(aws_workflows_production_lambda, \"Lambda\") {\n        Container(social_care_workflows_frontend_api_lambda, \"Social Care Core Pathways Frontend\", \"Lambda, Next.js (React)\", \"Provides the UI/UX of the Social Care System.\")\n      }\n\n      Deployment_Node(aws_workflows_production_rds, \"RDS\") {\n        ContainerDb(workflows_rds, \"Social Care Core Pathways\", \"PostgreSQL (13)\", \"Stores workflows, teams, and users.\")\n      }\n\n      Deployment_Node(aws_workflows_production_s3, \"S3\") {\n        Container(workflows_api_s3, \"Social Care Core Pathways Configuration\", \"JSON\", \"Stores configuration data.\")\n      }\n\n      Rel(social_care_workflows_frontend_api_gateway, social_care_workflows_frontend_api_lambda, \"Uses\", \"HTTPS\")\n      Rel(social_care_workflows_frontend_api_lambda, workflows_rds, \"Reads from and writes to\", \"Prisma ORM\")\n      Rel(social_care_workflows_frontend_api_lambda, workflows_api_s3, \"Reads from\", \"S3 Client\")\n      Rel(social_care_workflows_frontend_api_lambda, service_api_api_gateway, \"Reads resident details\", \"HTTPS/JSON\")\n  }\n}\n\nDeployment_Node(contentful, \"Contentful CMS\", \"Hackney\") {\n  Container(social_care_workflows_contentful, \"Social Care Core Pathways Configuration\", \"Contains configuration for core pathways forms, next steps and answer filters.\")\n}\n\nRel(social_care_workflows_contentful, workflows_api_s3, \"Writes to\", \"S3 Client\")\n\nDeployment_Node(google, \"Google Cloud Platform\", \"Hackney\") {\n  Container(social_care_referral_mash_apps_script, \"Social Care Referrals Apps Script\", \"Google Apps Script\", \"Receives MASH form data and sends it to AWS for further processing\")\n}\n\nRel(frontend_api_gateway, frontend_api_lambda, \"Uses\", \"HTTPS\")\nRel(frontend_api_lambda, service_api_api_gateway, \"Uses\", \"JSON/HTTPS\")\n\nRel(service_api_api_gateway, service_api_lambda, \"Uses\", \"HTTPS\")\nRel(service_api_lambda, service_api_rds, \"Reads from and writes to\", \"Entity Framework\")\nRel(service_api_lambda, service_api_docdb, \"Reads from and writes to\", \"Entity Framework\")\nRel(service_api_lambda, platform_api_rds, \"Reads from and writes to\", \"Entity Framework\")\n\n' Adult Social Care Care Package Builder\nRel(adult_social_care_builder_frontend_lambda, adult_social_care_builder_api_api_gateway, \"Uses\", \"HTTPS/JSON\")\nRel(adult_social_care_builder_api_api_gateway, adult_social_care_builder_api_lambda, \"Uses\", \"HTTPS\")\nRel(adult_social_care_builder_api_lambda, adult_social_care_builder_api_rds, \"Reads from and writes to\", \"Entity Framework\")\nRel(adult_social_care_builder_frontend_api_gateway, adult_social_care_builder_frontend_lambda, \"Uses\", \"HTTPS\")\n\n' Adult Social Care Care Package Transactions\nRel(adult_social_care_builder_transactions_api_api_gateway, adult_social_care_builder_transactions_api_lambda, \"Uses\", \"HTTPS\")\nRel(adult_social_care_builder_transactions_api_lambda, adult_social_care_builder_transactions_api_rds, \"Reads from and writes to\", \"Entity Framework\")\n\n' Adult Social Care Care Package Builder -&gt; Adult Social Care Care Package Transactions\nRel(adult_social_care_builder_api_lambda, adult_social_care_builder_transactions_api_api_gateway, \"Uses\", \"JSON/HTTPS\")\n\nRel(service_api_s3, service_api_mongodb_import_lambda, \"Triggers\", \"S3 Event Notification\")\nRel(service_api_mongodb_import_lambda, service_api_docdb, \"Imports into\")\n\nRel(service_api_s3, service_api_pg_import_lambda, \"Triggers\", \"S3 Event Notification\")\nRel(service_api_pg_import_lambda, service_api_rds, \"Imports into\")\n\n' Social Care Referrals Form Data Ingestion\nRel(social_care_referral_mash_apps_script, social_care_s3_api_gateway, \"Uses\", \"JSON/HTTPS\")\nRel(social_care_s3_api_gateway, social_care_referrals_aws_s3, \"Creates\", \"JSON\")\nRel(social_care_referrals_aws_s3, social_care_referrals_aws_sqs, \"Sends\", \"S3 Event Notification\")\nRel(social_care_referrals_aws_sqs, social_care_referrals_lambda, \"Triggers\", \"SQS Event Notification\")\nRel(social_care_referrals_lambda, social_care_referrals_aws_s3, \"Reads from\", \"S3 Object\")\nRel(social_care_referrals_lambda, service_api_api_gateway, \"Uses\", \"JSON/HTTPS\")\n\nSHOW_DYNAMIC_LEGEND()\n@enduml</code></pre> <p>Source: Hackney Social Care Deployment Diagram</p> <p>Deployment Diagram Details</p> <p>Scope: One or more software systems within a single deployment environment (e.g. production, staging,  development, etc).</p> <p>Primary elements: Deployment nodes, software system instances, and container instances.</p> <p>Intended audience: Infrastructure nodes used in the deployment of the software system.</p> <p>Recommended for most teams: Technical people inside and outside of the software development team; including  software architects, developers, infrastructure architects, and operations/support staff.</p>"},{"location":"architecture/decision-records/","title":"Decision Records","text":""},{"location":"architecture/decision-records/#why-record-decisions","title":"Why record decisions?","text":"<p>Most projects will make decisions that are agreed upon by team members and drastically impact the path taken to fulfil the project's requirements. Recording these decisions is an important part of project governance and eases onboarding for new developers.</p>"},{"location":"architecture/decision-records/#how-to-record-decisions","title":"How to record decisions","text":"<p>Decisions can be recorded in short-form or long-form, to provide the best results, long-form decision records should be used where possible. A good choice for the first decision record of a project is recording that you will in fact, record decisions.</p>"},{"location":"architecture/decision-records/#short-decision-record-example","title":"Short Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because it is a standard framework and the features of the other frameworks do not\noutweigh the drawback of adding a new dependency.\n</code></pre>"},{"location":"architecture/decision-records/#long-decision-record-example","title":"Long Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because comes out best (see below).\n\n### Consequences\n\n* Good, because tests are more readable\n* Good, because more easy to write tests\n* Good, because more readable assertions\n* Bad, because more complicated testing leads to more complicated assertions\n\n## Pros and Cons of the Options\n\n### Plain JUnit5\n\nHomepage: &lt;https://junit.org/junit5/docs/current/user-guide/&gt;\nJabRef testing guidelines: &lt;https://devdocs.jabref.org/getting-into-the-code/code-howtos#test-cases&gt;\n\nExample:\n\n```java\nString actual = markdownFormatter.format(source);\nassertTrue(actual.contains(\"Markup&lt;br /&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item one&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item 2&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&gt; rest\"));\nassertFalse(actual.contains(\"\\n\"));\n```\n\n* Good, because Junit5 is \"common Java knowledge\"\n* Bad, because complex assertions tend to get hard to read\n* Bad, because no fluent API\n\n### Hamcrest\n\nHomepage: &lt;https://github.com/hamcrest/JavaHamcrest&gt;\n\n* Good, because offers advanced matchers (such as `contains`)\n* Bad, because not full fluent API\n* Bad, because entry barrier is increased\n\n### AssertJ\n\nHomepage: &lt;https://joel-costigliola.github.io/assertj/&gt;\n\nExample:\n\n```java\nassertThat(markdownFormatter.format(source))\n        .contains(\"Markup&lt;br /&gt;\")\n        .contains(\"&lt;li&gt;list item one&lt;/li&gt;\")\n        .contains(\"&lt;li&gt;list item 2&lt;/li&gt;\")\n        .contains(\"&gt; rest\")\n        .doesNotContain(\"\\n\");\n```\n\n* Good, because offers fluent assertions\n* Good, because allows partial string testing to focus on important parts\n* Good, because assertions are more readable\n* Bad, because not commonly used\n* Bad, because newcomers have to learn an additional language to express test cases\n* Bad, because entry barrier is increased\n* Bad, because expressions of test cases vary from unit test to unit test\n\n## More Information\n\nGerman comparison between Hamcrest and AssertJ: &lt;https://www.sigs-datacom.de/uploads/tx_dmjournals/philipp_JS_06_15_gRfN.pdf&gt;.\n</code></pre>"},{"location":"architecture/decision-records/A0001-record-decisions-using-madr/","title":"A0001: Record decisions using MADR","text":"<p>Proposed  | 14 June 2023 | Lawrence Goldstien</p>"},{"location":"architecture/decision-records/A0001-record-decisions-using-madr/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We must record decisions that have an impact on the delivery of software projects. Decisions must be recorded in a  consistent style, allowing team members to understand the reasons behind a decision and the wider consequences.</p>"},{"location":"architecture/decision-records/A0001-record-decisions-using-madr/#considered-options","title":"Considered Options","text":"<ul> <li>MADR - Markdown Any Decision Records</li> <li>ADR Tools - Nat Pryce's ADR Tools</li> <li>Nygard's ADR - The original ADR </li> </ul>"},{"location":"architecture/decision-records/A0001-record-decisions-using-madr/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR - Markdown Any Decision Records\", because it allows for recording contextual information, has a  straightforward template format, and optional fields should a decision only require a light touch explainer.</p> <p>Architecture decision records shall be created with the A prefix: i.e.: \"A0001: Record decisions using MADR\".</p>"},{"location":"architecture/decision-records/A0001-record-decisions-using-madr/#consequences","title":"Consequences","text":"<p>A template have been created and documentation added explaining the reason for decision records and how to record them.</p>"},{"location":"architecture/decision-records/template/","title":"Template","text":"<p>Proposed  | 14 June 2023 | [names of decision makers]</p>"},{"location":"architecture/decision-records/template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story. You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"architecture/decision-records/template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/decision-records/template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/decision-records/template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"architecture/decision-records/template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/decision-records/template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"architecture/decision-records/template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"architecture/decision-records/template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"architecture/decision-records/template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"architecture/decision-records/template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or document the team agreement on the decision and/or define when this decision when and how the decision should be realized and if/when it should be re-visited and/or how the decision is validated. Links to other decisions and resources might here appear as well.}</p>"},{"location":"development/decision-records/","title":"Decision Records","text":""},{"location":"development/decision-records/#why-record-decisions","title":"Why record decisions?","text":"<p>Most projects will make decisions that are agreed upon by team members and drastically impact the path taken to fulfil the project's requirements. Recording these decisions is an important part of project governance and eases onboarding for new developers.</p>"},{"location":"development/decision-records/#how-to-record-decisions","title":"How to record decisions","text":"<p>Decisions can be recorded in short-form or long-form, to provide the best results, long-form decision records should be used where possible. A good choice for the first decision record of a project is recording that you will in fact, record decisions.</p>"},{"location":"development/decision-records/#short-decision-record-example","title":"Short Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because it is a standard framework and the features of the other frameworks do not\noutweigh the drawback of adding a new dependency.\n</code></pre>"},{"location":"development/decision-records/#long-decision-record-example","title":"Long Decision Record Example","text":"<pre><code># Use Plain JUnit5 for advanced test assertions\n\nProposed :material-help-circle: | 14 June 2023 | Lawrence Goldstien\n\n## Context and Problem Statement\n\nHow to write readable test assertions?\nHow to write readable test assertions for advanced tests?\n\n## Considered Options\n\n* Plain JUnit5\n* Hamcrest\n* AssertJ\n\n## Decision Outcome\n\nChosen option: \"Plain JUnit5\", because comes out best (see below).\n\n### Consequences\n\n* Good, because tests are more readable\n* Good, because more easy to write tests\n* Good, because more readable assertions\n* Bad, because more complicated testing leads to more complicated assertions\n\n## Pros and Cons of the Options\n\n### Plain JUnit5\n\nHomepage: &lt;https://junit.org/junit5/docs/current/user-guide/&gt;\nJabRef testing guidelines: &lt;https://devdocs.jabref.org/getting-into-the-code/code-howtos#test-cases&gt;\n\nExample:\n\n```java\nString actual = markdownFormatter.format(source);\nassertTrue(actual.contains(\"Markup&lt;br /&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item one&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&lt;li&gt;list item 2&lt;/li&gt;\"));\nassertTrue(actual.contains(\"&gt; rest\"));\nassertFalse(actual.contains(\"\\n\"));\n```\n\n* Good, because Junit5 is \"common Java knowledge\"\n* Bad, because complex assertions tend to get hard to read\n* Bad, because no fluent API\n\n### Hamcrest\n\nHomepage: &lt;https://github.com/hamcrest/JavaHamcrest&gt;\n\n* Good, because offers advanced matchers (such as `contains`)\n* Bad, because not full fluent API\n* Bad, because entry barrier is increased\n\n### AssertJ\n\nHomepage: &lt;https://joel-costigliola.github.io/assertj/&gt;\n\nExample:\n\n```java\nassertThat(markdownFormatter.format(source))\n        .contains(\"Markup&lt;br /&gt;\")\n        .contains(\"&lt;li&gt;list item one&lt;/li&gt;\")\n        .contains(\"&lt;li&gt;list item 2&lt;/li&gt;\")\n        .contains(\"&gt; rest\")\n        .doesNotContain(\"\\n\");\n```\n\n* Good, because offers fluent assertions\n* Good, because allows partial string testing to focus on important parts\n* Good, because assertions are more readable\n* Bad, because not commonly used\n* Bad, because newcomers have to learn an additional language to express test cases\n* Bad, because entry barrier is increased\n* Bad, because expressions of test cases vary from unit test to unit test\n\n## More Information\n\nGerman comparison between Hamcrest and AssertJ: &lt;https://www.sigs-datacom.de/uploads/tx_dmjournals/philipp_JS_06_15_gRfN.pdf&gt;.\n</code></pre>"},{"location":"development/decision-records/D0001-record-decisions-using-madr/","title":"D0001: Record decisions using MADR","text":"<p>Proposed  | 14 June 2023 | Lawrence Goldstien</p>"},{"location":"development/decision-records/D0001-record-decisions-using-madr/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We must record decisions that have an impact on the delivery of software projects. Decisions must be recorded in a  consistent style, allowing team members to understand the reasons behind a decision and the wider consequences.</p>"},{"location":"development/decision-records/D0001-record-decisions-using-madr/#considered-options","title":"Considered Options","text":"<ul> <li>MADR - Markdown Any Decision Records</li> <li>ADR Tools - Nat Pryce's ADR Tools</li> <li>Nygard's ADR - The original ADR </li> </ul>"},{"location":"development/decision-records/D0001-record-decisions-using-madr/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR - Markdown Any Decision Records\", because it allows for recording contextual information, has a  straightforward template format, and optional fields should a decision only require a light touch explainer.</p> <p>Developer decision records shall be created with the D prefix: i.e.: \"D0001: Record decisions using MADR\".</p>"},{"location":"development/decision-records/D0001-record-decisions-using-madr/#consequences","title":"Consequences","text":"<p>A template have been created and documentation added explaining the reason for decision records and how to record them.</p>"},{"location":"development/decision-records/template/","title":"Template","text":"<p>Proposed  | 14 June 2023 | [names of decision makers]</p>"},{"location":"development/decision-records/template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story. You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"development/decision-records/template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"development/decision-records/template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"development/decision-records/template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"development/decision-records/template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"development/decision-records/template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"development/decision-records/template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"development/decision-records/template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"development/decision-records/template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"development/decision-records/template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or document the team agreement on the decision and/or define when this decision when and how the decision should be realized and if/when it should be re-visited and/or how the decision is validated. Links to other decisions and resources might here appear as well.}</p>"},{"location":"playbooks/","title":"Introduction","text":"<p>Playbooks are essential in defining an organisation's \"way\", that is the approach taken when creating services like  APIs, websites, or conducting user research. They are living documentation and should be continually updated to reflect  the latest decisions of the community.</p>"},{"location":"playbooks/API-Playbook/","title":"Introduction","text":"<p>APIs are an essential part of modern software development, and when correctly managed, APIs can reduce time to production for digital transformation projects.</p> <p>This API playbook will help readers understand:</p> <ul> <li>How we go about building our APIs</li> <li>How we support and maintain our APIs</li> <li>Best practices that we have adopted as standard in our development of APIs</li> </ul>"},{"location":"playbooks/API-Playbook/conventions/","title":"Conventions","text":""},{"location":"playbooks/API-Playbook/conventions/#naming-conventions","title":"Naming Conventions","text":""},{"location":"playbooks/API-Playbook/conventions/#paths","title":"Paths","text":"<p>MUST use lowercase separate words with hyphens for url path segments.</p> <pre><code>/shipment-orders/{shipment-order-id}\n</code></pre> <p>This applies to concrete path segments and not the names of path parameters. For example <code>{shipment_order_id}</code> would be ok as a path parameter.</p> <p>MUST avoid trailing slashes</p> <p>The trailing slash must not have specific semantics. Resource paths must deliver the same results whether they have the trailing slash or not.</p> <pre><code>/posts/ === /posts\n</code></pre>"},{"location":"playbooks/API-Playbook/conventions/#query-parameters","title":"Query Parameters","text":"<p>MUST use snake_case for Query Parameters.</p> <pre><code>customer_number, order_id, billing_address\n</code></pre> <p>MUST use conventional query parameters.</p> <p>If you provide query support for searching, sorting, filtering, and paginating, you must stick to the following naming conventions:</p> <ul> <li> <p><code>q</code> - default query parameter (e.g. used by browser tab completion); should have an entity specific alias, like   <code>post-id</code> for a blog post.</p> </li> <li> <p><code>sort</code> - comma-separated list of fields to define the sort order. To indicate sorting direction, fields may be   prefixed with + (ascending) or - (descending), e.g. <code>/sales-orders?sort=+id</code></p> </li> <li> <p><code>fields</code> - to retrieve only a subset of fields of a resource</p> </li> <li> <p><code>embed</code> - to expand or embed sub-entities (i.e.: inside of an article entity, expand comments into the comments   object). Implementing embed correctly is difficult, so do it with care</p> </li> <li> <p><code>offset</code> - numeric offset of the first element on a page. See pagination section</p> </li> <li> <p><code>limit</code> - client suggested limit to restrict the number of entries on a page.</p> </li> </ul>"},{"location":"playbooks/API-Playbook/conventions/#resource-names","title":"Resource Names","text":"<p>MUST pluralise resource names.</p> <pre><code>/posts\n/posts/{post-id}\n/posts/{post-id}/comments\n/posts/{post-id}/comments/{comment-id}\n</code></pre> <p>Usually, a collection of resource instances is provided, in the special case of a resource singleton they are treated as a collection with cardinality 1.</p> <p>For example, a user only has a single record of system settings key value pairs, this can be presented as follows.</p> <pre><code>/user/{user-id}/settings\n</code></pre>"}]}